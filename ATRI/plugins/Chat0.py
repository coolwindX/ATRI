import os
import re
import json
import nonebot
import warnings
from pathlib import Path
from random import randint, choice
from datetime import datetime, timedelta
from nonebot import on_command, scheduler
from nonebot import CommandSession
from apscheduler.triggers.date import DateTrigger

import config
from ATRI.modules.favoIMP import AddFavoIMP, DelFavoIMP, GetFavoIMP
from ATRI.modules.time import now_time
from ATRI.modules.response import request_api
from ATRI.modules.funcControl import checkNoob


bot = nonebot.get_bot()
master = config.SUPERUSERS
KC_URL = 'https://nmsl.shadiao.app/api.php?level=min&lang=zh_cn'


def countX(lst, x):
    warnings.simplefilter('ignore', ResourceWarning)
    count = 0
    for ele in lst:
        if (ele == x):
            count = count + 1
    return count

def rmQQfromNoobLIST(user):
    file = Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json'
    with open(file, 'r') as f:
        bL = json.load(f)
    bL.pop(f"{user}")
    f = open(file, 'w')
    f.write(json.dumps(bL))
    f.close()


@on_command('morning', patterns = [r"Êó©[ÂÆâÂìá]|Êó©‰∏äÂ•Ω|ohayo|Âì¶ÂìàÂìü|„ÅäÊó©„ÅÜ"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 5.5 <= now_time() < 9:
            res = randint(1,2)
            if res == 1:
                await session.send(
                    choice(
                        [
                            'Âïä......Êó©‰∏äÂ•Ω...(ÂìàÊ¨†)',
                            'Âîî......ÂêßÂîß...Êó©‰∏ä...ÂìàÂïäÂïä~~~\nÊó©‰∏äÂ•Ω......',
                            'Êó©‰∏äÂ•Ω......',
                            'Êó©‰∏äÂ•ΩÂëú......ÂëºÂïäÂïä~~~~',
                            'Âïä......Êó©‰∏äÂ•Ω„ÄÇ\nÊò®Êôö‰πüÂæàÊøÄÊÉÖÂë¢ÔºÅ',
                            'ÂêßÂîßÂêßÂîß......ÊÄé‰πà‰∫Ü...Â∑≤ÁªèÊó©‰∏ä‰∫Ü‰πà...',
                            'Êó©‰∏äÂ•ΩÔºÅ',
                            '......ÁúãËµ∑Êù•ÂÉèÊòØÂÇçÊôöÔºåÂÖ∂ÂÆûÂ∑≤ÁªèÊó©‰∏ä‰∫ÜÂêóÔºü',
                            'Êó©‰∏äÂ•Ω......Ê¨∏~~~ËÑ∏Â•ΩËøëÂë¢'
                        ]
                    )
                )
            
            elif res == 2:
                voice = choice(
                    [
                        'ohayo1.amr', 'ohayo2.amr', 'ohayo3.amr', 'ohayo4.amr'
                    ]
                )
                voice = Path('.') / 'ATRI' / 'data' / 'voice' / f'{voice}'
                voice = os.path.abspath(voice)
                await session.send(f'[CQ:record,file=:///{voice}]')
        
        elif 9 <= now_time() < 18:
            await session.send(
                choice(
                    [
                        'ÂìºÔºÅËøô‰∏™ÁÇπËøòÊó©Âï•ÔºåÊò®ÊôöÂπ≤Âï•Âéª‰∫ÜÔºÅÔºü',
                        'ÁÜ¨Â§ú‰∫ÜÂØπÂêßÁÜ¨Â§ú‰∫ÜÂØπÂêßÁÜ¨Â§ú‰∫ÜÂØπÂêßÔºüÔºüÔºüÔºÅ',
                        'ÊòØ‰∏çÊòØÁÜ¨Â§úÊòØ‰∏çÊòØÁÜ¨Â§úÊòØ‰∏çÊòØÁÜ¨Â§úÔºüÔºÅ'
                    ]
                )
            )
        
        elif 18 <= now_time() < 24:
            await session.send(
                choice(
                    [
                        'Êó©‰∏™Âï•ÔºüÂìºÂîßÔºÅÊàëÈÉΩÂáÜÂ§áÊ¥óÊ¥óÁù°‰∫ÜÔºÅ',
                        '‰∏çÊòØ...‰Ω†ÁúãÁúãÂá†ÁÇπ‰∫ÜÔºåÂìºÔºÅ',
                        'Êôö‰∏äÂ•ΩÂìá'
                    ]
                )
            )
        
        elif 0 <= now_time() < 5.5:
            await session.send(
                choice(
                    [
                        'zzzz......',
                        'zzzzzzzz......',
                        'zzz...Â•ΩÊ∂©Âì¶..zzz....',
                        'Âà´...‰∏çË¶Å..zzz..ÈÇ£..zzz..',
                        'ÂòªÂòª..zzz..Âëê~..zzzz..',
                        '...zzz....ÂìßÊ∫úÂìßÊ∫ú....'
                    ]
                )
            )


@on_command('noon', patterns = [r"‰∏≠ÂçàÂ•Ω|ÂçàÂÆâ"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 11 <= now_time() <= 15:
            await session.send(
                choice(
                    [
                        'ÂçàÂÆâw','ÂçàËßâË¶ÅÂ•ΩÂ•ΩÁù°Âì¶ÔºåATRI‰ºöÈô™‰º¥Âú®‰Ω†Ë∫´ÊóÅÁöÑw',
                        'ÂóØÂìºÂìº~Áù°ÂêßÔºåÂ∞±ÂÉèÂπ≥Â∏∏‰∏ÄÊ†∑ÂÆâÁú†Âêß~o(‚âß‚ñΩ‚â¶)o',
                        'Áù°‰Ω†ÂçàËßâÂéªÔºÅÂìºÂîßÔºÅÔºÅ'
                    ]
                )
            )


@on_command('night', patterns = [r"ÊôöÂÆâ|oyasuminasai|„Åä„ÇÑ„Åô„Åø„Å™„Åï„ÅÑ"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 5.5 <= now_time() < 11:
            await session.send(
                choice(
                    [
                        '‰Ω†ÂèØÁåùÊ≠ªÁÆó‰∫ÜÂêßÔºÅ',
                        'ÔºüÂïäËøô',
                        '‰∫≤ÔºåËøôËæπÂª∫ËÆÆËµ∂Âø´ÂéªÁù°ËßâÂë¢~~~',
                        '‰∏çÂèØÂøç‰∏çÂèØÂøç‰∏çÂèØÂøçÔºÅÔºÅ‰∏∫‰ΩïËøôËøò‰∏çÁåùÊ≠ªÔºÅÔºÅ'
                    ]
                )
            )
        
        elif 11 <= now_time() < 15:
            await session.send(
                choice(
                    [
                        'ÂçàÂÆâw','ÂçàËßâË¶ÅÂ•ΩÂ•ΩÁù°Âì¶ÔºåATRI‰ºöÈô™‰º¥Âú®‰Ω†Ë∫´ÊóÅÁöÑw',
                        'ÂóØÂìºÂìº~Áù°ÂêßÔºåÂ∞±ÂÉèÂπ≥Â∏∏‰∏ÄÊ†∑ÂÆâÁú†Âêß~o(‚âß‚ñΩ‚â¶)o',
                        'Áù°‰Ω†ÂçàËßâÂéªÔºÅÂìºÂîßÔºÅÔºÅ'
                    ]
                )
            )
        
        elif 15 <= now_time() < 19:
            await session.send(
                choice(
                    [
                        'Èöæ‰∏çÊàêÔºüÔºüÊôö‰∏ä‰∏çÊÉ≥Áù°ËßâÔºüÔºüÁé∞Âú®‰ºëÊÅØ',
                        'Â∞±......Êå∫Á¶ªË∞±ÁöÑ...Áé∞Âú®Áù°Ëßâ',
                        'Áé∞Âú®ËøòÊòØÁôΩÂ§©Âì¶ÔºåÁù°ËßâËøòÂ§™Êó©‰∫Ü'
                    ]
                )
            )
        
        elif 19 <= now_time() < 24:
            res = randint(1,2)
            if res == 1:
                await session.send(
                    choice(
                        [
                            'ÂóØÂìºÂìº~Áù°ÂêßÔºåÂ∞±ÂÉèÂπ≥Â∏∏‰∏ÄÊ†∑ÂÆâÁú†Âêß~o(‚âß‚ñΩ‚â¶)o',
                            '......(ÊâìÁûåÁù°)',
                            'Âëº...Âëº...Â∑≤ÁªèÁù°ÁùÄ‰∫ÜÂì¶~...Âëº......',
                            '......Êàë„ÄÅÊàë‰ºöÂú®ËøôÂÆàÁùÄ‰Ω†ÁöÑÔºåËØ∑Âä°ÂøÖÂ•ΩÂ•ΩÁù°ÁùÄ'
                        ]
                    )
                )
            
            elif res == 2:
                voice = Path('.') / 'ATRI' / 'data' / 'voice' / 'oyasuminasai.amr'
                voice = os.path.abspath(voice)
                await session.send(f'[CQ:record,file=:///{voice}]')
        
        elif 0 <= now_time() < 5.5:
            await session.send(
                choice(
                    [
                        'zzzz......',
                        'zzzzzzzz......',
                        'zzz...Â•ΩÊ∂©Âì¶..zzz....',
                        'Âà´...‰∏çË¶Å..zzz..ÈÇ£..zzz..',
                        'ÂòªÂòª..zzz..Âëê~..zzzz..'
                    ]
                )
            )


@on_command('az', patterns = [r"[aA][zZ]|[ÈòøÂïä]Ëøô"], only_to_me = False)
async def az(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            res = randint(1,3)
            if res == 1:
                # res = random.randint(1,10)
                img = choice(
                    [
                        'AZ.jpg', 'AZ1.jpg'
                    ]
                )
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')

@on_command('suki', patterns = [r"ÂñúÊ¨¢|Áà±‰Ω†|Áà±|suki|daisuki|„Åô„Åç|Â•Ω„Åç|Ë¥¥Ë¥¥|ËÄÅÂ©Ü|[Mm][Uu][Aa]|‰∫≤‰∏Ä‰∏™"])
async def az(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if 0 <= GetFavoIMP(user) < 250:
                img = choice(
                    [
                        'TZ.jpg', 'TZ1.jpg', 'TZ2.jpg'
                    ]
                )
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')
            
            elif 250 <= GetFavoIMP(user):
                res = randint(1,2)
                if res == 1:
                    img = choice(
                        [
                            'SUKI.jpg', 'SUKI1.jpg', 'SUKI2.png'
                        ]
                    )
                    img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                    img = os.path.abspath(img)
                    await session.send(f'[CQ:image,file=file:///{img}]')
            
                elif res == 2:
                    voice = choice(
                        [
                            'suki1.amr', 'suki2.amr'
                        ]
                    )
                    voice = Path('.') / 'ATRI' / 'data' / 'voice' / f'{voice}'
                    voice = os.path.abspath(voice)
                    await session.send(f'[CQ:record,file=file:///{voice}]')

@on_command('kouchou', patterns = [r"Ëçâ‰Ω†Â¶à|Êìç|‰Ω†Â¶à|ËÑëÁò´|Â∫üÊü¥|fw|five|Â∫üÁâ©|ÊàòÊñó|Áà¨|Áà™Â∑¥|sb|SB|Âï•[bÊâπÊØîÈÄº]|ÂÇªb|Áªô[Áà∑üë¥]Áà¨|Âò¥Ëá≠"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                DelFavoIMP(u, 5, True)
                res = randint(1,3)
                if res == 1:
                    img = choice(
                        [
                            'WQ.jpg', 'WQ.png', 'WQ1.jpg', 'WQ2.jpg', 'FN.jpg'
                        ]
                    )
                    img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                    img = os.path.abspath(img)
                    await session.send(f'[CQ:image,file=file:///{img}]')

                elif res == 2:
                    res = randint(1,3)
                    if res == 1:
                        await session.send('ÂØπÂò¥Ëá≠‰∫∫‰ª•ÁÅ´ÁÆ≠ÁªÑÂêàÂøÖÊùÄÊã≥ÔºåÊù•ËÆ©‰ªñÂ•ΩÂ•ΩÂñù‰∏ÄÂ£∂ÔºÅÂìºÔºÅ')
                        voice = os.path.abspath(Path('.') / 'ATRI' / 'data' / 'voice' / 'ATR_b402_027.amr')
                        await session.send(f'[CQ:record,file=file:///{voice}]')
                    
                    elif res == 2:
                        await session.send('È±ºÈõ∑ÁªÑÂêàÊã≥‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîÂïä‚Äî‚Äî‚Äî‚ÄîÔºÅÔºÅÔºÅ')
                        voice = os.path.abspath(Path('.') / 'ATRI' / 'data' / 'voice' / 'CombinationTorpedoFist.amr')
                        await session.send(f'[CQ:record,file=file:///{voice}]')
                    
                    elif res == 3:
                        await session.send('ÁÅ´ÁÆ≠Êã≥‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîÔºÅÔºÅÔºÅ')
                        voice = os.path.abspath(Path('.') / 'ATRI' / 'data' / 'voice' / 'RocketPunch.amr')
                        await session.send(f'[CQ:record,file=file:///{voice}]')
                
                elif res == 3:
                    await session.send(request_api(KC_URL))

@on_command('ciallo', patterns = [r"[Cc][iI][aA][lL][lL][oO]"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                res = randint(1,2)
                if res == 1:
                    img = choice(
                        [
                            'CIALLO.jpg', 'CIALLO1.jpg', 'CIALLO2.jpg', 'CIALLO3.jpg', 'CIALLO4.jpg', 'CIALLO5.jpg'
                        ]
                    )
                    img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                    img = os.path.abspath(img)
                    await session.send(f'[CQ:image,file=file:///{img}]')
                
                elif res == 2:
                    await session.send('CialloÔΩû(‚à†„Éªœâ< )‚åí‚òÖ')

@on_command('ne', patterns = [r"Âëê|„Å≠„Åà|Âè£ÂÜÖ"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,3) == 1:
                await session.send(
                    choice(
                        [
                            'Âëê', 'ÂëêÂëêÂëê', '„Å≠„Åà', '„Å≠„Åà„Å≠„Åà'
                        ]
                    )
                )

@on_command('kani', patterns = [r"ËûÉËüπ|ü¶Ä|„Ç´„Éã|[kK]ani"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                img = choice(
                    [
                        'KN.png', 'KN.jpg', 'KN1.jpg', 'KN2.jpg', 'KN3.png'
                    ]
                )
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')
            
            elif randint(1,2) == 2:
                voice = choice(
                    [
                        'PX1.amr', 'PX2.amr', 'PX3.amr', 'PX4.amr', 'PX5.amr', 'PX6.amr'
                    ]
                )
                voice = Path('.') / 'ATRI' / 'data' / 'voice' / f'{voice}'
                voice = os.path.abspath(voice)
                await session.send(f'[CQ:record,file=file:///{voice}]')

@on_command('qingjie', patterns = [r"Èùí[Ê¥ÅÁªì]"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / 'H.jpg'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')

@on_command('jz', patterns = [r"Â∞±Ëøô"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                img = choice(
                    [
                        'JZ.png', 'JZ1.png'
                    ]
                )
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')

@on_command('hai', patterns = [r"ÂÆ≥|Âóê"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                img = Path('.') / 'ATRI' / 'data' / 'emoji' / 'H.jpg'
                img = os.path.abspath(img)
                await session.send(f'[CQ:image,file=file:///{img}]')

@on_command('high_per', patterns = [r"È´òÊÄßËÉΩ|[Â§™ÊúÄ][Ê£íÂ•ΩÂº∫Áåõ]|[tT][qQ][lL]|[üêÇÁâõnN][üç∫ÊâπbB]|„Åô„Åî„ÅÑ|sugoi|[ÊñØÊ≠ª]ÂõΩ‰∏Ä|„Çà„Åã„Å£„Åü"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    msg = str(session.event.message)
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            pat = r"Ëçâ‰Ω†Â¶à|Êìç|‰Ω†Â¶à|ËÑëÁò´|Â∫üÊü¥|fw|five|Â∫üÁâ©|ÊàòÊñó|Áà¨|Áà™Â∑¥|sb|SB|Âï•[bÊâπÊØîÈÄº]|ÂÇªb|Áªô[Áà∑üë¥]Áà¨|Âò¥Ëá≠"
            if re.findall(pat, msg):
                pass
            else:
                AddFavoIMP(user, 3, True)
                msg = choice(
                    [
                       'ÂΩìÁÑ∂ÔºåÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõ~ÔºÅ',
                       'Â∞è‰∫ã‰∏ÄÊ°©ÔºåÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõ',
                       'ÊÄé‰πàÊ†∑ÔºüËøòÊòØÊàëÊØîËæÉÈ´òÊÄßËÉΩÂêßÔºü',
                       'ÂìºÂìºÔºÅÊàëÊûúÁÑ∂ÊòØÈ´òÊÄßËÉΩÁöÑÂë¢ÔºÅ',
                       'Âõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõÔºÅÂóØÂìºÔºÅ',
                       'Âõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂë¢ÔºÅ',
                       'ÂìéÂëÄ~ÔºåÊàëÂèØÁúüÊòØÂ§™È´òÊÄßËÉΩ‰∫Ü',
                       'Ê≠£ÊòØÔºåÂõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑ',
                       'ÊòØÁöÑ„ÄÇÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõ‚ô™',
                       'ÊØïÁ´üÊàëÂèØÊòØÈ´òÊÄßËÉΩÁöÑÔºÅ',
                       'ÂòøÂòøÔºåÊàëÁöÑÈ´òÊÄßËÉΩÂèëÊå•Âá∫Êù•Âï¶‚ô™',
                       'ÊàëÊûúÁÑ∂ÊòØÂæàÈ´òÊÄßËÉΩÁöÑÊú∫Âô®‰∫∫ÂêßÔºÅ',
                       'ÊòØÂêßÔºÅË∞ÅÂè´ÊàëËøô‰πàÈ´òÊÄßËÉΩÂë¢ÔºÅÂìºÂìºÔºÅ',
                       '‰∫§ÁªôÊàëÂêßÔºåÊúâÈ´òÊÄßËÉΩÁöÑÊàëÈô™ÁùÄÂë¢',
                       'Âë£......ÊàëÁöÑÈ´òÊÄßËÉΩÔºåÊØ´Êó†ÈÅóÊÜæÂú∞ÊñΩÂ±ïÂá∫Êù•‰∫Ü......'
                    ]
                )
                await session.send(msg)

@on_command('dont_worry', patterns = [r"Ê≤°‰∫ã|Ê≤°ÂÖ≥Á≥ª|Â§ß‰∏àÂ§´|ËøòÂ•Ω|‰∏çË¶ÅÁ¥ß|Ê≤°Âá∫Â§ßÈóÆÈ¢ò|Ê≤°‰º§Âà∞Âì™"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    msg = str(session.event.message)
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            pat = r"Ëçâ‰Ω†Â¶à|Êìç|‰Ω†Â¶à|ËÑëÁò´|Â∫üÊü¥|fw|five|Â∫üÁâ©|ÊàòÊñó|Áà¨|Áà™Â∑¥|sb|SB|Âï•[bÊâπÊØîÈÄº]|ÂÇªb|Áªô[Áà∑üë¥]Áà¨|Âò¥Ëá≠"
            if re.findall(pat, msg):
                pass
            else:
                msg = choice(
                    [
                       'ÂΩìÁÑ∂ÔºåÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõ~ÔºÅ',
                       'Ê≤°‰∫ãÊ≤°‰∫ãÔºåÂõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõÔºÅÂóØÂìºÔºÅ',
                       'Ê≤°‰∫ãÁöÑÔºåÂõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂë¢ÔºÅ',
                       'Ê≠£ÊòØÔºåÂõ†‰∏∫ÊàëÊòØÈ´òÊÄßËÉΩÁöÑ',
                       'ÊòØÁöÑ„ÄÇÊàëÊòØÈ´òÊÄßËÉΩÁöÑÂòõ‚ô™',
                       'ÊØïÁ´üÊàëÂèØÊòØÈ´òÊÄßËÉΩÁöÑÔºÅ',
                       'ÈÇ£ÁßçÁ®ãÂ∫¶ÁöÑ‰∫ã‰∏çÁÆó‰ªÄ‰πàÁöÑ„ÄÇ\nÂà´ÁúãÊàëËøôÊ†∑ÔºåÊàëÂèØÊòØÈ´òÊÄßËÉΩÁöÑ',
                       'Ê≤°ÈóÆÈ¢òÁöÑÔºåÊàëÂèØÊòØÈ´òÊÄßËÉΩÁöÑ'
                    ]
                )
                await session.send(msg)

@on_command('mohead', patterns = [r"Êë∏[Â§¥Êë∏]"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    msg = str(session.event.message)
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            pat = r"Ëçâ‰Ω†Â¶à|Êìç|‰Ω†Â¶à|ËÑëÁò´|Â∫üÊü¥|fw|five|Â∫üÁâ©|ÊàòÊñó|Áà¨|Áà™Â∑¥|sb|SB|Âï•[bÊâπÊØîÈÄº]|ÂÇªb|Áªô[Áà∑üë¥]Áà¨|Âò¥Ëá≠"
            if re.findall(pat, msg):
                pass
            else:
                res = randint(1,3)
                if 1 <= res <= 2:
                    img = choice(
                        [
                            'TZ.jpg', 'TZ1.jpg', 'TZ2.jpg'
                        ]
                    )
                    img = Path('.') / 'ATRI' / 'data' / 'emoji' / f'{img}'
                    img = os.path.abspath(img)
                    await session.send(f'[CQ:image,file=file:///{img}]')
                
                elif res == 3:
                    AddFavoIMP(user, 1, False)
                    msg = choice(
                        [
                            'Â§¥ÂèëÁöÑÊüîÈ°∫Â∫¶‰∏äÂçáÔºåÊàëÁöÑÈ´òÊÄßËÉΩÊõ¥‰∏ä‰∏ÄÂ±ÇÊ•º......',
                            '*Ëπ≠Ëπ≠'
                        ]
                    )
                    await session.send(msg)

@on_command('whl', patterns = [r"ÊàëÂ•Ω‰∫Ü|[wW][hH[lL]"], only_to_me = False)
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if randint(1,2) == 1:
                await session.send('‰∏çËÆ∏Â•ΩÔºÅÊÜãÂõûÂéªÔºÅ')

@on_command('birthday', patterns = [r"ÁîüÊó•Âø´‰πê|ÁîüÂø´|[bB]irthday|Ë™ïÁîüÊó•|tanjobi"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            if datetime.date.today().strftime('%y%m%d') == '200828':
                AddFavoIMP(user, 50, True)
                res = randint(1,3)
                if res == 1:
                    msg = choice(
                        [
                            'Ë∞¢Ë∞¢ÔºåË∞¢Ë∞¢‰Ω†ÔºÅ',
                            'ÊÑüË∞¢...15551',
                            'Ë∞¢Ë∞¢‰Ω†‰ª¨orz...'
                        ]
                    )
                    await session.send(msg)
                
                elif 2 <= res <= 3:
                    voice = choice(
                        [
                            'THX.amr', 'THX1.amr', 'THX2.amr', 'THX3.amr', 'THX4.amr'
                        ]
                    )
                    voice = Path('.') / 'ATRI' / 'data' / 'voice' / f'{voice}'
                    voice = os.path.abspath(voice)
                    await session.send(f'[CQ:record,file=file:///{voice}]')

                if randint(1,3) == 2:
                    img = Path('.') / 'ATRI' / 'data' / 'emoji' / 'SUKI.jpg'
                    img = os.path.abspath(img)
                    await session.send(f'[CQ:image,file=file:///{img}]')

            else:
                pass


@on_command('nicesleep', patterns = [r"Á≤æËá¥Áù°Áú†"])
async def _(session: CommandSession):
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if user == master:
            await session.send('ÈÇ£...ËØ∑‰∏ª‰∫∫Ëá™Â∑±Èó≠‰∏äÁúºÔºÅÂìºÂîß')
            return
        else:
            await session.send('ÊÅ≠ÂñúÔºÅÊÇ®Â∑≤Ë¢´ATRIÂ±èËîΩ7Â∞èÊó∂')
            try:
                with open(Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json', 'r') as f:
                    bL = json.load(f)
            except:
                bL = {}
            bL[f"{user}"] = f"{user}"
            file = Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json'
            f = open(file, 'w')
            f.write(json.dumps(bL))
            f.close()
            delta = timedelta(hours = 7)
            trigger = DateTrigger(
                run_date = datetime.now() + delta
            )

            scheduler.add_job( #type: ignore
                func = rmQQfromNoobLIST,
                trigger = trigger,
                args = (session.event.user_id,),
                misfire_grace_time = 60,
            )

noobList0 = []
@on_command('robozi', patterns = [r"ËêùÂçúÂ≠ê"], only_to_me = False)
async def _(session: CommandSession):
    global noobList0
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            try:
                with open(Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json', 'r') as f:
                    bL = json.load(f)
            except:
                bL = {}
            noobList0.append(user)
            if countX(noobList0, user) == 1:
                await session.send('ËêùÂçúÂ≠êÊòØÂØπÊú∫Âô®‰∫∫ÁöÑËîëÁß∞ÔºÅ')

            elif countX(noobList0, user) == 2:
                if user == master:
                    await session.send('ÊòØ‰∏ª‰∫∫ÁöÑËØù...ÈÇ£ÁÆó‰∫Ü...ÂëúÂëú\nÂç≥‰ΩøÂà∞Ëææ‰∫ÜATRIÁöÑÊúÄ‰ΩéÂøçËÄêÈôêÂ∫¶......')
                    noobList0 = list(set(noobList0))
                    pass

                else:
                    await session.send('ÊòØ‰∫öÊâòËéâ......ËêùÂçúÂ≠êÂèØÊòØÂØπÊú∫Âô®‰∫∫ÁöÑËîëÁß∞......\nËøôÊòØÁ¨¨‰∫åÊ¨°Ë≠¶ÂëäÂì¶ÔºåÊé•‰∏ãÊù•10ÂàÜÈíüÊàë‰∏ç‰ºöÂÜçÁêÜ‰Ω†‰∫ÜÔºÅÂìºÂîßÔºÅ\nÔºàÂ•ΩÊÑüÂ∫¶-1Ôºâ')
                    DelFavoIMP(user, 1, False)
                    bL[f"{user}"] = f"{user}"
                    file = Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json'
                    f = open(file, 'w')
                    f.write(json.dumps(bL))
                    f.close()
                    noobList0 = list(set(noobList0))
                    print(noobList0)
                    delta = timedelta(minutes = 10)
                    trigger = DateTrigger(
                        run_date = datetime.now() + delta
                    )

                    scheduler.add_job( #type: ignore
                        func = rmQQfromNoobLIST,
                        trigger = trigger,
                        args = (session.event.user_id,),
                        misfire_grace_time = 60,
                    )

noobList1 = []
@on_command('ntr', patterns = [r"[nNŒ∑–∏…¥–ò][tT][rR]|[ÁâõüêÇüêÆ]Â§¥‰∫∫"], only_to_me = False)
async def _(session: CommandSession):
    global noobList1
    user = session.event.user_id
    group = session.event.group_id
    if checkNoob(user, group):
        if 0 <= now_time() < 5.5:
            pass
        else:
            msg = str(session.event.message)
            try:
                with open(Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json', 'r') as f:
                    bL = json.load(f)
            except:
                bL = {}
            pattern = r"[nNŒ∑–∏…¥–ò][tT][rR]|[ÁâõüêÇüêÆ]Â§¥‰∫∫"
            if re.findall(pattern, msg):
                noobList1.append(user)
                if countX(noobList1, user) == 5:
                    if user == master:
                        await session.send('ÊòØ‰∏ª‰∫∫ÁöÑËØù...ÈÇ£ÁÆó‰∫Ü...ÂëúÂëú\nÂç≥‰ΩøÂà∞Ëææ‰∫ÜATRIÁöÑÊúÄ‰ΩéÂøçËÄêÈôêÂ∫¶......')
                        noobList1 = list(set(noobList1))
                        pass

                    else:
                        await session.send(f'[CQ:at,qq={user}]ÂìºÔºÅÊé•‰∏ãÊù•30ÂàÜÈíüÂà´ÊÉ≥ËÆ©ÊàëÁêÜ‰Ω†ÔºÅ\nÔºàÂ•ΩÊÑüÂ∫¶-2Ôºâ')
                        DelFavoIMP(user, 2, False)
                        bL[f"{user}"] = f"{user}"
                        file = Path('.') / 'ATRI' / 'plugins' / 'noobList' / 'noobList.json'
                        f = open(file, 'w')
                        f.write(json.dumps(bL))
                        f.close()
                        noobList1 = list(set(noobList1))
                        print(noobList1)
                        delta = timedelta(minutes = 30)
                        trigger = DateTrigger(
                            run_date = datetime.now() + delta
                        )

                        scheduler.add_job( #type: ignore
                            func = rmQQfromNoobLIST,
                            trigger = trigger,
                            args = (session.event.user_id,),
                            misfire_grace_time = 60,
                        )
                
                else:
                    await session.send('‰Ω†Â¶àÁöÑÔºåÁâõÂ§¥‰∫∫Ôºå' + request_api(KC_URL))